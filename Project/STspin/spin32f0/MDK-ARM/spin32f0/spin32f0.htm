<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [spin32f0\spin32f0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image spin32f0\spin32f0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Apr 08 22:46:41 2019
<BR><P>
<H3>Maximum Stack Usage =        228 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_TIM1_Init &rArr; LL_TIM_OC_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">PendSV_Handler</a><BR>
 <LI><a href="#[21]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC1_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from stm32f0xx_mc_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[20]">DMA1_Channel4_5_IRQHandler</a> from stm32f0xx_mc_it.o(i.DMA1_Channel4_5_IRQHandler) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[1b]">EXTI0_1_IRQHandler</a> from stm32f0xx_mc_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[1c]">EXTI2_3_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[1d]">EXTI4_15_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from stm32f0xx_mc_it.o(i.HardFault_Handler) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[29]">I2C1_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[2f]">MCP_OnTimeOut</a> from motor_control_protocol.o(i.MCP_OnTimeOut) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[30]">MCP_ReceivedFrame</a> from motor_control_protocol.o(i.MCP_ReceivedFrame) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[31]">MCP_SentFrame</a> from motor_control_protocol.o(i.MCP_SentFrame) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[11]">NMI_Handler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[17]">PVD_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[3]">R3F0XX_CurrentReadingCalibration</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[0]">R3F0XX_GetPhaseCurrents</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_GetPhaseCurrents) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[0]">R3F0XX_GetPhaseCurrents</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_GetPhaseCurrents) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[32]">R3F0XX_HFCurrentsCalibration</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_HFCurrentsCalibration) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[b]">R3F0XX_IsOverCurrentOccurred</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_IsOverCurrentOccurred) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[33]">R3F0XX_SetADCSampPointCalibration</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointCalibration) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[5]">R3F0XX_SetADCSampPointSect1</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect1) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[5]">R3F0XX_SetADCSampPointSect1</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect1) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[6]">R3F0XX_SetADCSampPointSect2</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect2) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[6]">R3F0XX_SetADCSampPointSect2</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect2) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[7]">R3F0XX_SetADCSampPointSect3</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect3) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[7]">R3F0XX_SetADCSampPointSect3</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect3) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[8]">R3F0XX_SetADCSampPointSect4</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect4) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[8]">R3F0XX_SetADCSampPointSect4</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect4) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[9]">R3F0XX_SetADCSampPointSect5</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect5) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[9]">R3F0XX_SetADCSampPointSect5</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect5) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[a]">R3F0XX_SetADCSampPointSect6</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect6) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[a]">R3F0XX_SetADCSampPointSect6</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect6) referenced from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
 <LI><a href="#[1]">R3F0XX_SwitchOffPWM</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SwitchOffPWM) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[2]">R3F0XX_SwitchOnPWM</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SwitchOnPWM) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[4]">R3F0XX_TurnOnLowSides</a> from r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_TurnOnLowSides) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[18]">RTC_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[e]">STO_OTF_ResetPLL</a> from sto_pll_speed_pos_fdbk.o(i.STO_OTF_ResetPLL) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[c]">STO_PLL_ForceConvergency1</a> from sto_pll_speed_pos_fdbk.o(i.STO_PLL_ForceConvergency1) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[d]">STO_PLL_ForceConvergency2</a> from sto_pll_speed_pos_fdbk.o(i.STO_PLL_ForceConvergency2) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[f]">STO_PLL_IsVarianceTight</a> from sto_pll_speed_pos_fdbk.o(i.STO_PLL_IsVarianceTight) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[13]">SVC_Handler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from stm32f0xx_mc_it.o(i.SysTick_Handler) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[2d]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f031x6.o(.text)
 <LI><a href="#[26]">TIM14_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[27]">TIM16_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[28]">TIM17_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from stm32f0xx_mc_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[23]">TIM1_CC_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[25]">TIM3_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[34]">UFCP_AbortReceive</a> from usart_frame_communication_protocol.o(i.UFCP_AbortReceive) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[35]">UFCP_Receive</a> from usart_frame_communication_protocol.o(i.UFCP_Receive) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[36]">UFCP_Send</a> from usart_frame_communication_protocol.o(i.UFCP_Send) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from stm32f0xx_mc_it.o(i.USART1_IRQHandler) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_stm32f031x6.o(.text) referenced from startup_stm32f031x6.o(RESET)
 <LI><a href="#[2e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f031x6.o(.text)
 <LI><a href="#[2c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[37]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fe]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ff]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[100]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[101]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f031x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_ExecRamp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_FastDiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetS16Speed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcAvrgMecSpeed01Hz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgMecSpeed01Hz
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_ExecRamp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[38]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[108]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>Circle_Limitation</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, circle_limitation.o(i.Circle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Circle_Limitation
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f0xx_mc_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; TSK_HighFrequencyTask &rArr; STO_PLL_CalcElAngle &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_mc_it.o(i.DMA1_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f0xx_mc_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EXTI0_1_IRQHandler &rArr; UI_HandleStartStopButton_cb &rArr; MC_StopMotor1 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>F0XX_BRK_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, r3_f0xx_pwm_curr_fdbk.o(i.F0XX_BRK_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>FCP_CalcCRC</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, frame_communication_protocol.o(i.FCP_CalcCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
</UL>

<P><STRONG><a name="[d4]"></a>FCP_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Init
</UL>

<P><STRONG><a name="[74]"></a>FCP_SetClient</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, frame_communication_protocol.o(i.FCP_SetClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FCP_SetClient
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
</UL>

<P><STRONG><a name="[41]"></a>FD_FastDiv</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, fast_div.o(i.FD_FastDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcElAngle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_ExecRamp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Calc
</UL>

<P><STRONG><a name="[b6]"></a>FD_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fast_div.o(i.FD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
</UL>

<P><STRONG><a name="[4d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[c5]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[46]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[48]"></a>HAL_MspInit</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[4b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4c]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_EnableCSS))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4f]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[50]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 910 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[51]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f0xx_mc_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardFault_Handler &rArr; UFCP_RX_IRQ_Handler &rArr; UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStart
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_TX_IRQ_Handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>LL_ADC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f0xx_ll_adc.o(i.LL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f0xx_ll_adc.o(i.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>LL_EXTI_Init</STRONG> (Thumb, 178 bytes, Stack size 4 bytes, stm32f0xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>LL_GPIO_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[59]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[ae]"></a>LL_TIM_BDTR_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f0xx_ll_tim.o(i.LL_TIM_BDTR_Init))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[ac]"></a>LL_TIM_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f0xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[ad]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 506 bytes, Stack size 20 bytes, stm32f0xx_ll_tim.o(i.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[5b]"></a>LL_USART_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>MCI_Clear_Iqdref</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_Clear_Iqdref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_Clear_Iqdref
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[5e]"></a>MCI_EncoderAlign</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_EncoderAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCI_EncoderAlign &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[60]"></a>MCI_ExecBufferedCommands</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_ExecBufferedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MCI_ExecBufferedCommands &rArr; STC_ExecRamp &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[a6]"></a>MCI_ExecSpeedRamp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[f0]"></a>MCI_ExecTorqueRamp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecTorqueRamp))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[63]"></a>MCI_FaultAcknowledged</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_FaultAcknowledged))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_FaultAcknowledged
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultAcknowledged
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[65]"></a>MCI_GetAvrgMecSpeed01Hz</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_GetAvrgMecSpeed01Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetAvrgMecSpeed01Hz
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeed01Hz
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[d8]"></a>MCI_GetControlMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e1]"></a>MCI_GetIab</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIab))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e2]"></a>MCI_GetIalphabeta</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIalphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[87]"></a>MCI_GetImposedMotorDirection</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetImposedMotorDirection))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[df]"></a>MCI_GetIqd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[db]"></a>MCI_GetIqdref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[ea]"></a>MCI_GetLastRampFinalSpeed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetLastRampFinalSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[68]"></a>MCI_GetMecSpeedRef01Hz</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_GetMecSpeedRef01Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetMecSpeedRef01Hz
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRef01Hz
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[6a]"></a>MCI_GetSTMState</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_GetSTMState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetSTMState
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
</UL>

<P><STRONG><a name="[ef]"></a>MCI_GetTeref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetTeref))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[e4]"></a>MCI_GetValphabeta</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetValphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e3]"></a>MCI_GetVqd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetVqd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[a4]"></a>MCI_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[ee]"></a>MCI_SetCurrentReferences</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_SetCurrentReferences))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetCurrentReferences
</UL>

<P><STRONG><a name="[f3]"></a>MCI_SetIdref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_SetIdref))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[6c]"></a>MCI_StartMotor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_StartMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
</UL>

<P><STRONG><a name="[6d]"></a>MCI_StopMotor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_StopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>

<P><STRONG><a name="[6e]"></a>MCI_StopSpeedRamp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_StopSpeedRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_StopSpeedRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_StopSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[ca]"></a>MCM_Clarke</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Clarke))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[70]"></a>MCM_Park</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, mc_math.o(i.MCM_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MCM_Park &rArr; MCM_Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[72]"></a>MCM_Rev_Park</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mc_math.o(i.MCM_Rev_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCM_Rev_Park &rArr; MCM_Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[71]"></a>MCM_Trig_Functions</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, mc_math.o(i.MCM_Trig_Functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcElAngle
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
</UL>

<P><STRONG><a name="[73]"></a>MCP_Init</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, motor_control_protocol.o(i.MCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MCP_Init &rArr; FCP_SetClient
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_SetClient
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[2f]"></a>MCP_OnTimeOut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_OnTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCP_OnTimeOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[30]"></a>MCP_ReceivedFrame</STRONG> (Thumb, 1532 bytes, Stack size 144 bytes, motor_control_protocol.o(i.MCP_ReceivedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MCP_ReceivedFrame &rArr; UI_GetReg &rArr; SPD_GetS16Speed &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetCurrentReferences
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetMPInfo
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[31]"></a>MCP_SentFrame</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_SentFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCP_SentFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[7d]"></a>MC_GetSTMStateMotor1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_api.o(i.MC_GetSTMStateMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC_GetSTMStateMotor1 &rArr; MCI_GetSTMState
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[7e]"></a>MC_RunMotorControlTasks</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mc_tasks.o(i.MC_RunMotorControlTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; RUC_Clear &rArr; VSS_Clear &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Scheduler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7f]"></a>MC_Scheduler</STRONG> (Thumb, 670 bytes, Stack size 32 bytes, mc_tasks.o(i.MC_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MC_Scheduler &rArr; RUC_Clear &rArr; VSS_Clear &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_TurnOnLowSides
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SwitchOnPWM
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SwitchOffPWM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetImposedMotorDirection
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_TransitionEnded
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetStartTransition
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcAvrgMecSpeed01Hz
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_IsObserverConverged
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Clear
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgMecSpeed01Hz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_ExecRamp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[98]"></a>MC_StartMotor1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_api.o(i.MC_StartMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MC_StartMotor1 &rArr; MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[99]"></a>MC_StopMotor1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_api.o(i.MC_StopMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MC_StopMotor1 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[9a]"></a>MCboot</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, mc_tasks.o(i.MCboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MCboot &rArr; VSS_Init &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRef01HzDefault
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[b3]"></a>MPM_CalcElMotorPower</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, motor_power_measurement.o(i.MPM_CalcElMotorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MPM_CalcElMotorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
</UL>

<P><STRONG><a name="[96]"></a>MPM_Clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor_power_measurement.o(i.MPM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPM_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[de]"></a>MPM_GetAvrgElMotorPowerW</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_GetAvrgElMotorPowerW))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[a7]"></a>MX_MotorControl_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motorcontrol.o(i.MX_MotorControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_MotorControl_Init &rArr; MCboot &rArr; VSS_Init &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_pins
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>NTC_CalcAvTemp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(i.NTC_CalcAvTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NTC_CalcAvTemp &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[dd]"></a>NTC_GetAvTemp_C</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_GetAvTemp_C))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[a3]"></a>NTC_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ntc_temperature_sensor.o(i.NTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NTC_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[da]"></a>PID_GetKD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKD))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[be]"></a>PID_GetKI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKI))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_GetPLLGains
</UL>

<P><STRONG><a name="[94]"></a>PID_GetKIDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKIDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[bd]"></a>PID_GetKP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKP))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_GetPLLGains
</UL>

<P><STRONG><a name="[d9]"></a>PID_GetKPDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKPDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[9d]"></a>PID_HandleInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_HandleInit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Init
</UL>

<P><STRONG><a name="[43]"></a>PID_SetIntegralTerm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetIntegralTerm))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_OTF_ResetPLL
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_ResetPLL
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_Clear
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[f1]"></a>PID_SetKD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[c4]"></a>PID_SetKI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_SetPLLGains
</UL>

<P><STRONG><a name="[c3]"></a>PID_SetKP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_SetPLLGains
</UL>

<P><STRONG><a name="[bb]"></a>PI_Controller</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pid_regulator.o(i.PI_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcElAngle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[84]"></a>PQD_CalcElMotorPower</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pqd_motor_power_measurement.o(i.PQD_CalcElMotorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PQD_CalcElMotorPower &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_CalcElMotorPower
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[d2]"></a>PWMC_CheckOverCurrent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_CheckOverCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[85]"></a>PWMC_CurrentReadingCalibr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pwm_curr_fdbk.o(i.PWMC_CurrentReadingCalibr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_CurrentReadingCalibr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[c8]"></a>PWMC_GetPhaseCurrents</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_GetPhaseCurrents))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[cc]"></a>PWMC_SetPhaseVoltage</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, pwm_curr_fdbk.o(i.PWMC_SetPhaseVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_SetPhaseVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[45]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[3]"></a>R3F0XX_CurrentReadingCalibration</STRONG> (Thumb, 464 bytes, Stack size 20 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R3F0XX_CurrentReadingCalibration &rArr; R3F0XX_SwitchOnPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SwitchOnPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>R3F0XX_GetPhaseCurrents</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_GetPhaseCurrents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F0XX_GetPhaseCurrents
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[9b]"></a>R3F0XX_Init</STRONG> (Thumb, 360 bytes, Stack size 20 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R3F0XX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[b]"></a>R3F0XX_IsOverCurrentOccurred</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_IsOverCurrentOccurred))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>R3F0XX_SetADCSampPointCalibration</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R3F0XX_SetADCSampPointCalibration &rArr; R3F0XX_WriteTIMRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[5]"></a>R3F0XX_SetADCSampPointSect1</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R3F0XX_SetADCSampPointSect1 &rArr; R3F0XX_WriteTIMRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[6]"></a>R3F0XX_SetADCSampPointSect2</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R3F0XX_SetADCSampPointSect2 &rArr; R3F0XX_WriteTIMRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[7]"></a>R3F0XX_SetADCSampPointSect3</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R3F0XX_SetADCSampPointSect3 &rArr; R3F0XX_WriteTIMRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[8]"></a>R3F0XX_SetADCSampPointSect4</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R3F0XX_SetADCSampPointSect4 &rArr; R3F0XX_WriteTIMRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[9]"></a>R3F0XX_SetADCSampPointSect5</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect5))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R3F0XX_SetADCSampPointSect5 &rArr; R3F0XX_WriteTIMRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[a]"></a>R3F0XX_SetADCSampPointSect6</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SetADCSampPointSect6))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R3F0XX_SetADCSampPointSect6 &rArr; R3F0XX_WriteTIMRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[1]"></a>R3F0XX_SwitchOffPWM</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SwitchOffPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R3F0XX_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>R3F0XX_SwitchOnPWM</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_SwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F0XX_SwitchOnPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_CurrentReadingCalibration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>R3F0XX_TurnOnLowSides</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_TurnOnLowSides))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetSystemClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[c9]"></a>RCM_ExecNextConv</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, regular_conversion_manager.o(i.RCM_ExecNextConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_ExecNextConv
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[b0]"></a>RCM_ExecRegularConv</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, regular_conversion_manager.o(i.RCM_ExecRegularConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[81]"></a>RCM_ExecUserConv</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, regular_conversion_manager.o(i.RCM_ExecUserConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCM_ExecUserConv &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[cd]"></a>RCM_ReadOngoingConv</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, regular_conversion_manager.o(i.RCM_ReadOngoingConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCM_ReadOngoingConv
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[b1]"></a>RCM_RegisterRegConv</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, regular_conversion_manager.o(i.RCM_RegisterRegConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[b5]"></a>REMNG_Calc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ramp_ext_mngr.o(i.REMNG_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = REMNG_Calc &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_FastDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[91]"></a>REMNG_ExecRamp</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ramp_ext_mngr.o(i.REMNG_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = REMNG_ExecRamp &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_FastDiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[90]"></a>REMNG_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ramp_ext_mngr.o(i.REMNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = REMNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[c7]"></a>REMNG_RampCompleted</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ramp_ext_mngr.o(i.REMNG_RampCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[88]"></a>RUC_Clear</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, revup_ctrl.o(i.RUC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RUC_Clear &rArr; VSS_Clear &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[8a]"></a>RUC_Exec</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, revup_ctrl.o(i.RUC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RUC_Exec &rArr; VSS_SetMecAcceleration &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[ce]"></a>RUC_FirstAccelerationStageReached</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_FirstAccelerationStageReached))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[e0]"></a>RUC_GetNumberOfPhases</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetNumberOfPhases))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[eb]"></a>RUC_GetPhaseDurationms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseDurationms))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[ec]"></a>RUC_GetPhaseFinalMecSpeed01Hz</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseFinalMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[ed]"></a>RUC_GetPhaseFinalTorque</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseFinalTorque))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[a1]"></a>RUC_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, revup_ctrl.o(i.RUC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RUC_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[f4]"></a>RUC_SetPhaseDurationms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseDurationms))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[f5]"></a>RUC_SetPhaseFinalMecSpeed01Hz</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseFinalMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[f6]"></a>RUC_SetPhaseFinalTorque</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseFinalTorque))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[b9]"></a>RVBS_CalcAvVbus</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_CalcAvVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[a2]"></a>RVBS_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RVBS_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[67]"></a>SPD_GetAvrgMecSpeed01Hz</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetAvrgMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeed01Hz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
</UL>

<P><STRONG><a name="[8f]"></a>SPD_GetElAngle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[ba]"></a>SPD_GetS16Speed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, speed_pos_fdbk.o(i.SPD_GetS16Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPD_GetS16Speed &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[bf]"></a>SPD_IsMecSpeedReliable</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, speed_pos_fdbk.o(i.SPD_IsMecSpeedReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcAvrgMecSpeed01Hz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgMecSpeed01Hz
</UL>

<P><STRONG><a name="[8b]"></a>STC_CalcTorqueReference</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, speed_torq_ctrl.o(i.STC_CalcTorqueReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeed01Hz
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[44]"></a>STC_Clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[62]"></a>STC_ExecRamp</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, speed_torq_ctrl.o(i.STC_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = STC_ExecRamp &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
</UL>

<P><STRONG><a name="[95]"></a>STC_ForceSpeedReferenceToCurrentSpeed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_ForceSpeedReferenceToCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ForceSpeedReferenceToCurrentSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeed01Hz
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[5d]"></a>STC_GetDefaultIqdref</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetDefaultIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[e7]"></a>STC_GetMaxAppPositiveMecSpeed01Hz</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMaxAppPositiveMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[69]"></a>STC_GetMecSpeedRef01Hz</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRef01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRef01Hz
</UL>

<P><STRONG><a name="[a5]"></a>STC_GetMecSpeedRef01HzDefault</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRef01HzDefault))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[d6]"></a>STC_GetMinAppNegativeMecSpeed01Hz</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMinAppNegativeMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[66]"></a>STC_GetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeed01Hz
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[9f]"></a>STC_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[61]"></a>STC_SetControlMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
</UL>

<P><STRONG><a name="[86]"></a>STC_SetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[6f]"></a>STC_StopSpeedRamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_StopSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopSpeedRamp
</UL>

<P><STRONG><a name="[64]"></a>STM_FaultAcknowledged</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, state_machine.o(i.STM_FaultAcknowledged))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
</UL>

<P><STRONG><a name="[92]"></a>STM_FaultProcessing</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, state_machine.o(i.STM_FaultProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = STM_FaultProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[d7]"></a>STM_GetFaultState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[6b]"></a>STM_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[9c]"></a>STM_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[5f]"></a>STM_NextState</STRONG> (Thumb, 302 bytes, Stack size 4 bytes, state_machine.o(i.STM_NextState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[bc]"></a>STO_GetPLLGains</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sto_pll_speed_pos_fdbk.o(i.STO_GetPLLGains))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STO_GetPLLGains
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKP
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKI
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e]"></a>STO_OTF_ResetPLL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sto_pll_speed_pos_fdbk.o(i.STO_OTF_ResetPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STO_OTF_ResetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>STO_PLL_CalcAvrgElSpeedDpp</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_CalcAvrgElSpeedDpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STO_PLL_CalcAvrgElSpeedDpp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[83]"></a>STO_PLL_CalcAvrgMecSpeed01Hz</STRONG> (Thumb, 466 bytes, Stack size 88 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_CalcAvrgMecSpeed01Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STO_PLL_CalcAvrgMecSpeed01Hz &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[c0]"></a>STO_PLL_CalcElAngle</STRONG> (Thumb, 466 bytes, Stack size 96 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_CalcElAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STO_PLL_CalcElAngle &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[89]"></a>STO_PLL_Clear</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STO_PLL_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[c]"></a>STO_PLL_ForceConvergency1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_ForceConvergency1))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>STO_PLL_ForceConvergency2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_ForceConvergency2))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>STO_PLL_GetEstimatedBemf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_GetEstimatedBemf))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e8]"></a>STO_PLL_GetEstimatedBemfLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_GetEstimatedBemfLevel))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e5]"></a>STO_PLL_GetEstimatedCurrent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_GetEstimatedCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e9]"></a>STO_PLL_GetObservedBemfLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_GetObservedBemfLevel))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[dc]"></a>STO_PLL_GetObserverGains</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_GetObserverGains))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[9e]"></a>STO_PLL_Init</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = STO_PLL_Init &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[8d]"></a>STO_PLL_IsObserverConverged</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_IsObserverConverged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STO_PLL_IsObserverConverged
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[f]"></a>STO_PLL_IsVarianceTight</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_IsVarianceTight))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>STO_PLL_SetObserverGains</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sto_pll_speed_pos_fdbk.o(i.STO_PLL_SetObserverGains))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[c1]"></a>STO_ResetPLL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sto_pll_speed_pos_fdbk.o(i.STO_ResetPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STO_ResetPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[c2]"></a>STO_SetPLLGains</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sto_pll_speed_pos_fdbk.o(i.STO_SetPLLGains))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STO_SetPLLGains
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKP
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKI
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_mc_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SysTick_Handler &rArr; MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; RUC_Clear &rArr; VSS_Clear &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f0xx_mc_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F0XX_BRK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TSK_HardwareFaultTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_HardwareFaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSK_HardwareFaultTask &rArr; R3F0XX_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SwitchOffPWM
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3f]"></a>TSK_HighFrequencyTask</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, mc_tasks.o(i.TSK_HighFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TSK_HighFrequencyTask &rArr; STO_PLL_CalcElAngle &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_CalcElAngle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_ResetPLL
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcElAngle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_CalcAvrgElSpeedDpp
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_FirstAccelerationStageReached
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_RampCompleted
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Calc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadOngoingConv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecNextConv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPhaseVoltage
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetPhaseCurrents
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Clarke
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Limitation
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>TSK_SafetyTask_PWMOFF</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mc_tasks.o(i.TSK_SafetyTask_PWMOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CheckOverCurrent
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[34]"></a>UFCP_AbortReceive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_AbortReceive))
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[d3]"></a>UFCP_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UFCP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[54]"></a>UFCP_OVR_IRQ_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_OVR_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UFCP_OVR_IRQ_Handler &rArr; UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[57]"></a>UFCP_RX_IRQ_Handler</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usart_frame_communication_protocol.o(i.UFCP_RX_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UFCP_RX_IRQ_Handler &rArr; UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[35]"></a>UFCP_Receive</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_Receive))
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[36]"></a>UFCP_Send</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usart_frame_communication_protocol.o(i.UFCP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[56]"></a>UFCP_TX_IRQ_Handler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_TX_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UFCP_TX_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[77]"></a>UI_ExecCmd</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, user_interface.o(i.UI_ExecCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UI_ExecCmd &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopSpeedRamp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[78]"></a>UI_ExecSpeedRamp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, user_interface.o(i.UI_ExecSpeedRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UI_ExecSpeedRamp &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[7c]"></a>UI_GetMPInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetMPInfo))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[76]"></a>UI_GetReg</STRONG> (Thumb, 1022 bytes, Stack size 32 bytes, user_interface.o(i.UI_GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UI_GetReg &rArr; SPD_GetS16Speed &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetVqd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetValphabeta
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRef01Hz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalSpeed
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIalphabeta
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIab
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetControlMode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeed01Hz
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetObserverGains
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetObservedBemfLevel
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetEstimatedCurrent
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetEstimatedBemfLevel
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetEstimatedBemf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_GetPLLGains
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetFaultState
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMinAppNegativeMecSpeed01Hz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMaxAppPositiveMecSpeed01Hz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetS16Speed
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetNumberOfPhases
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKPDivisor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKP
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKI
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_GetAvTemp_C
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_GetAvrgElMotorPowerW
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[79]"></a>UI_GetRevupData</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, user_interface.o(i.UI_GetRevupData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI_GetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseFinalTorque
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseFinalMecSpeed01Hz
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseDurationms
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[40]"></a>UI_HandleStartStopButton_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui_task.o(i.UI_HandleStartStopButton_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UI_HandleStartStopButton_cb &rArr; MC_StopMotor1 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>UI_Init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, user_interface.o(i.UI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[82]"></a>UI_Scheduler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ui_task.o(i.UI_Scheduler))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[58]"></a>UI_SerialCommunicationTimeOutStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStart))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[55]"></a>UI_SerialCommunicationTimeOutStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStop))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[7b]"></a>UI_SetCurrentReferences</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_interface.o(i.UI_SetCurrentReferences))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_SetCurrentReferences
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[75]"></a>UI_SetReg</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, user_interface.o(i.UI_SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UI_SetReg &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetIdref
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetTeref
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRef01Hz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_SetPLLGains
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_SetObserverGains
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_PLL_GetObserverGains
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STO_GetPLLGains
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKP
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKI
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKD
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[7a]"></a>UI_SetRevupData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, user_interface.o(i.UI_SetRevupData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UI_SetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseFinalTorque
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseFinalMecSpeed01Hz
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseDurationms
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[a9]"></a>UI_TaskInit</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, ui_task.o(i.UI_TaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UI_TaskInit &rArr; MCP_Init &rArr; FCP_SetClient
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f0xx_mc_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART1_IRQHandler &rArr; UFCP_RX_IRQ_Handler &rArr; UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStart
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_TX_IRQ_Handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f031x6.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>VBS_GetAvBusVoltage_V</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_voltage_sensor.o(i.VBS_GetAvBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
</UL>

<P><STRONG><a name="[cf]"></a>VBS_GetAvBusVoltage_d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bus_voltage_sensor.o(i.VBS_GetAvBusVoltage_d))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[8c]"></a>VSS_CalcAvrgMecSpeed01Hz</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, virtual_speed_sensor.o(i.VSS_CalcAvrgMecSpeed01Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VSS_CalcAvrgMecSpeed01Hz &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[d1]"></a>VSS_CalcElAngle</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, virtual_speed_sensor.o(i.VSS_CalcElAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VSS_CalcElAngle &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_FastDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[97]"></a>VSS_Clear</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, virtual_speed_sensor.o(i.VSS_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = VSS_Clear &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_FastDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[a0]"></a>VSS_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, virtual_speed_sensor.o(i.VSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = VSS_Init &rArr; FD_FastDiv &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_FastDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[b8]"></a>VSS_SetMecAcceleration</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, virtual_speed_sensor.o(i.VSS_SetMecAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VSS_SetMecAcceleration &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[b7]"></a>VSS_SetMecAngle</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, virtual_speed_sensor.o(i.VSS_SetMecAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VSS_SetMecAngle &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[8e]"></a>VSS_SetStartTransition</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, virtual_speed_sensor.o(i.VSS_SetStartTransition))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VSS_SetStartTransition
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[93]"></a>VSS_TransitionEnded</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_TransitionEnded))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[10b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2c]"></a>main</STRONG> (Thumb, 976 bytes, Stack size 80 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = main &rArr; MX_TIM1_Init &rArr; LL_TIM_OC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a8]"></a>mc_lock_pins</STRONG> (Thumb, 178 bytes, Stack size 4 bytes, mc_tasks.o(i.mc_lock_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mc_lock_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[aa]"></a>MX_TIM1_Init</STRONG> (Thumb, 596 bytes, Stack size 128 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_TIM1_Init &rArr; LL_TIM_OC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>FOC_Clear</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mc_tasks.o(i.FOC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOC_Clear &rArr; STC_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[32]"></a>R3F0XX_HFCurrentsCalibration</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_HFCurrentsCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3F0XX_HFCurrentsCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[b4]"></a>R3F0XX_WriteTIMRegisters</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, r3_f0xx_pwm_curr_fdbk.o(i.R3F0XX_WriteTIMRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F0XX_WriteTIMRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SetADCSampPointSect6
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SetADCSampPointSect5
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SetADCSampPointSect4
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SetADCSampPointSect3
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SetADCSampPointSect2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SetADCSampPointSect1
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F0XX_SetADCSampPointCalibration
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
