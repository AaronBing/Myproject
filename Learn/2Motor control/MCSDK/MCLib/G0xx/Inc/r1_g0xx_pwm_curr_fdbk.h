/**
  ******************************************************************************
  * @file    r1_g0xx_pwm_curr_fdbk.h
  * @author  Motor Control SDK Team, ST Microelectronics
  * @brief   This file contains all definitions and functions prototypes for the
  *          r1_f0xx_pwm_curr_fdbk component of the Motor Control SDK.
  ******************************************************************************
  * @attention


  */

/* Define to prevent recursive inclusion --------定义以防止递归包含------------*/
#ifndef __R1_F0XX_PWMNCURRFDBK_H
#define __R1_F0XX_PWMNCURRFDBK_H

#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */

/* Includes ------------------------------------------------------------------*/
#include "pwm_curr_fdbk.h"

/** @addtogroup MCSDK
  * @{
  */

/** @defgroup r1_f0XX_pwm_curr_fdbk
  * @brief PWM F0XX single shunt component of the Motor Control SDK
  *         电机控制SDK的PWM F0XX单分流器件
  * @{
  */

/* Exported constants --------------------------------------------------------*/

/**
* @brief  Flags definition   标志定义
*/
#define EOFOC 0x0001u /*!< Flag to indicate end of FOC duty available
                          标记表示可用的FOC任务结束 */
#define STBD3 0x0002u /*!< Flag to indicate which phase has been distorted
                           in boudary 3 zone (A or B)
                           用于指示边界3区域（A或B）中哪个相位已失真的标记*/
#define DSTEN 0x0004u /*!< Flag to indicate if the distortion must be performed
                           or not (in case of charge of bootstrap capacitor phase
                           is not required)
                           用于指示是否必须执行失真的标志（如果不需要自举电容器相位充电）*/
#define SOFOC 0x0008u /*!< This flag will be reset to zero at the begin of FOC
                           and will be set in the UP IRQ. If at the end of
                           FOC it is set the software error must be generated
                           该标志将在FOC开始时重置为零，并将在UP IRQ中设置。如果在FOC结束时设置，则必须生成软件错误*/
#define CALIB 0x0010u /*!< This flag is used to indicate the ADC calibration
                           phase in order to avoid concurrent regular conversions
                           该标志用于指示ADC校准阶段，以避免并发的常规转换*/
/* Exported types ------------------------------------------------------------*/

/**
  * @brief  R1_F0XX parameters definition
  */
typedef struct
{

  uint8_t hIChannel;              /*!< ADC channel used for conversion of
                                       current. It must be equal to
                                       ADC_CHANNEL_x x= 0, ..., 15
                                       ADC通道用于转换电流。它必须等于ADC_CHANNEL_x x = 0，...，15*/

/* PWM generation parameters --------------------------------------------------*/
  uint16_t hDeadTime;             /*!< Dead time in number of TIM clock
                                       cycles. If CHxN are enabled, it must
                                       contain the dead time to be generated
                                       by the microcontroller, otherwise it
                                       expresses the maximum dead time
                                       generated by driving network
                                       TIM时钟周期数的死区时间。如果CHxN使能，则必须包含微控制器产生的死区时间，
                                       否则表示驱动网络产生的最大死区时间*/


  uint8_t  bRepetitionCounter;    /*!< It expresses the number of PWM
                                       periods to be elapsed before compare
                                       registers are updated again. In
                                       particular:
                                       RepetitionCounter= (2* PWM periods) -1
                                       它表示在再次更新比较寄存器之前要经过的PWM周期数。*/
  uint16_t hTafter;               /*!< It is the sum of dead time plus rise time
                                       express in number of TIM clocks.
                                       它是以TIM时钟数表示的死区时间加上升时间的总和*/
  uint16_t hTbefore;              /*!< It is the value of sampling time
                                       expressed in numbers of TIM clocks.
                                       它是以TIM时钟数表示的采样时间值。*/
  uint16_t hTMin;                 /*!< It is the sum of dead time plus rise time
                                       plus sampling time express in numbers of
                                       TIM clocks.
                                       它是死区时间加上升时间加上采样时间与TIM时钟数表示的总和。*/
  uint16_t hHTMin;                /*!< It is the half of hTMin value.
                                        它是hTMin值的一半。*/
  uint16_t hCHTMin;                /*!< It is the compensated half of hTMin value in case of rate >1.
                                      在速率> 1的情况下，它是hTMin值的补偿一半。*/
  uint16_t hTSample;              /*!< It is the sampling time express in
                                       numbers of TIM clocks.
                                       采样时间以TIME时钟的数量表示。*/
  uint16_t hMaxTrTs;              /*!< It is the maximum between twice of rise
                                       time express in number of TIM clocks and
                                       twice of sampling time express in numbers
                                       of TIM clocks.
                                       它是TIM时钟数表示的两倍上升时间之间的最大值，TIM时钟数表示的采样时间的两倍。*/


/* PWM Driving signals initialization ----------------------------------------*/
  TIM_TypeDef * TIMx;                   /*!< timer used for PWM generation.
                                              用于PWM生成的定时器。*/


  LowSideOutputsFunction_t LowSideOutputs; /*!< Low side or enabling signals
                                                generation method are defined
                                                here.
                                                这里定义了低侧或使能信号产生方法。*/


  GPIO_TypeDef * pwm_en_u_port;
  uint32_t      pwm_en_u_pin;
  GPIO_TypeDef * pwm_en_v_port;
  uint32_t      pwm_en_v_pin;
  GPIO_TypeDef * pwm_en_w_port;
  uint32_t      pwm_en_w_pin;

}R1_G0XXParams_t;

/**
  * @brief  Handle structure of the r1_f0xx_pwm_curr_fdbk Component
            处理r1_f0xx_pwm_curr_fdbk组件的结构
  */
typedef struct
{
  PWMC_Handle_t _Super;       /*!< Offset of current sensing network   电流传感网络的偏移 */
  uint16_t Half_PWMPeriod;    /*!< Half PWM Period in timer clock counts 定时器时钟计数的半PWM周期 */
  uint16_t hPhaseOffset;      /*!< Offset of current sensing network  电流传感网络的偏移*/
  uint16_t hDmaBuff[2];       /*!< Buffer used for PWM distortion points 用于PWM失真点的缓冲器*/
  uint16_t hCntSmp1;          /*!< First sampling point express in timer counts 第一个采样点以计时器计数表示*/
  uint16_t hCntSmp2;          /*!< Second sampling point express in timer counts 第二个采样点以计时器计数表示*/
  uint8_t sampCur1;           /*!< Current sampled in the first sampling point 电流在第一个采样点采样*/
  uint8_t sampCur2;           /*!< Current sampled in the second sampling point 电流在第二个采样点采样*/
  int16_t hCurrAOld;          /*!< Previous measured value of phase A current 先前的A相电流测量值*/
  int16_t hCurrBOld;          /*!< Previous measured value of phase B current B相电流的先前测量值*/
  int16_t hCurrCOld;          /*!< Previous measured value of phase C current 先前的C相电流测量值*/
  uint8_t bInverted_pwm;      /*!< This value indicates the type of the previous
                                   PWM period (Regular, Distort PHA, PHB or PHC)
                                   该值表示先前PWM周期的类型（常规，Distort PHA，PHB或PHC）*/
  uint8_t bInverted_pwm_new;  /*!< This value indicates the type of the current
                                   PWM period (Regular, Distort PHA, PHB or PHC)
                                   该值表示当前PWM周期的类型（常规，Distort PHA，PHB或PHC）*/
  uint16_t hPreloadCCMR2Set;  /*!< Preload value for TIMx->CCMR2 register used to
                                    set the mode of TIMx CH4
                                    TIMx-> CCMR2寄存器的预加载值，用于设置TIMx CH4的模式*/
  uint8_t bDMATot;            /*!< Value to indicate the total number of expected
                                   DMA TC events
                                   用于指示预期DMA TC事件总数的值*/
  uint8_t bDMACur;            /*!< Current number of DMA TC events occurred
                                    发生当前DMA TC事件的数量*/

  uint32_t wPreloadDisableActing; /*!< Preload disable to be applied. 要应用预加载禁用。*/
  uint32_t wPreloadDisableCC1; /*!< CCMR1 that disables the preload register
                                     of the channel to be distorted.
                                     CCMR1禁止通道的预加载寄存器失真。*/
  uint32_t wPreloadDisableCC2; /*!< CCMR1 that disables the preload register
                                     of the channel to be distorted.
                                     CCMR2禁止通道的预加载寄存器失真。
                                     */
  uint32_t wPreloadDisableCC3; /*!< CCMR2 that disables the preload register
                                     of the channel to be distorted.
                                     CCMR3禁止通道的预加载寄存器失真。*/


  uint16_t hFlags;            /*!< Flags
                                   EOFOC: Flag to indicate end of FOC duty available
                                   STBD3: Flag to indicate which phase has been distorted
                                          in boudary 3 zone (A or B)
                                   DSTEN: Flag to indicate if the distortion must be
                                          performed or not (charge of bootstrap
                                          capacitor phase)
                                   SOFOC: This flag will be reset to zero at the begin of FOC
                                          and will be set in the UP IRQ. If at the end of
                                          FOC it is set the software error must be generated
                                   CALIB: This flag is used to indicate the ADC calibration
                                          phase in order to avoid concurrent regular conversions
                                          EOFOC：表示可用FOC占空比结束的标志
                                          STBD3：表示在boudary 3区域（A或B）中哪个相位失真的
                                          DSTEN：表示是否必须执行失真的标志（自举电容相位的充电）
                                          SOFOC：此标志将在FOC开始时重置为零，并将在UP IRQ中设置。如果在FOC结束时设置，则必须生成软件错误
                                          CALIB：该标志用于指示ADC校准阶段，以避免同时进行定期转换*/

  uint16_t hCurConv[2];       /*!< Array used to store phase current conversions 用于存储相电流转换的数组*/

  bool OverCurrentFlag;         /*!< This flag is set when an overcurrent occurs. 发生过电流时设置该标志。*/
  bool OverVoltageFlag;
  bool BrakeActionLock;
  bool ADCRegularLocked;        /*!< When it's true, we do not allow usage of ADC to do regular conversion on systick
                                  如果这是真的，我们不允许使用ADC在systick上进行常规转换*/

  R1_G0XXParams_t const * pParams_str;

}PWMC_R1_G0_Handle_t;

/* Exported functions ------------------------------------------------------- */

/**
  * R1_G0XX implements MC IRQ function TIMER Break
    R1_G0XX实现MC IRQ功能TIMER Break
  */
void * R1G0XX_OVERCURRENT_IRQHandler(PWMC_R1_G0_Handle_t *pHandle);

void * R1G0XX_OVERVOLTAGE_IRQHandler(PWMC_R1_G0_Handle_t *pHandle);

/**
  * R1_G0XX implements MC IRQ function TIMER Update
   R1_G0XX实现MC IRQ功能TIMER更新
  */
void R1G0XX_TIMx_UP_IRQHandler(PWMC_R1_G0_Handle_t *pHdl);

/**
  * It initializes TIM1, ADC, GPIO, DMA1 and NVIC for single shunt current
  * reading configuration using STM32F0XX family.
    它使用STM32F0XX系列初始化TIM1，ADC，GPIO，DMA1和NVIC，以实现单分流电流*读取配置。
  */
void R1G0XX_Init(PWMC_R1_G0_Handle_t *pHandle);

/**
  * It stores into the handler the voltage present on the
  * current feedback analog channel when no current is flowin into the
  * motor
  当没有电流流入电机时，它将电流反馈模拟通道上的电压存储在处理程序中
  */
void R1G0XX_CurrentReadingCalibration(PWMC_Handle_t *pHdl);

/**
  * It computes and return latest converted motor phase currents motor
    它计算并返回最新转换的电机相电流电机
  */
void R1G0XX_GetPhaseCurrents(PWMC_Handle_t *pHdl,Curr_Components* pStator_Currents);

/**
  * It turns on low sides switches. This function is intended to be
  * used for charging boot capacitors of driving section. It has to be
  * called each motor start-up when using high voltage drivers
    它打开低侧开关。该功能旨在用于为驱动部分的启动电容器充电。当使用高压驱动器时，必须将其称为每个电机启动
  */
void R1G0XX_TurnOnLowSides(PWMC_Handle_t *pHdl);

/**
  * It enables PWM generation on the proper Timer peripheral acting on
  * MOE bit, enaables the single shunt distortion and reset the TIM status
  它可以在正确的定时器外设上产生PWM，作用于MOE位，可以实现单分流失真并复位TIM状态
  */
void R1G0XX_SwitchOnPWM(PWMC_Handle_t *pHdl);

/**
  * It disables PWM generation on the proper Timer peripheral acting on
  * MOE bit, disables the single shunt distortion and reset the TIM status
  它禁止在正确的定时器外设上产生PWM，作用于*MOE位，禁用单分流失真并复位TIM状态
  */
void R1G0XX_SwitchOffPWM(PWMC_Handle_t *pHdl);

/**
  * Implementation of the single shunt algorithm to setup the
  * TIM1 register and DMA buffers values for the next PWM period.
  实现单分流算法，以设置下一个PWM周期的TIM1寄存器和DMA缓冲区值。
  */
uint16_t R1G0XX_CalcDutyCycles(PWMC_Handle_t *pHdl);

/**
  * Execute a regular conversion.
  * The function is not re-entrant (can't executed twice at the same time)
  * It returns 0xFFFF in case of conversion error.
  执行常规转换。
  该函数不可重入（不能同时执行两次）
  如果转换错误，则返回0xFFFF。
  */
uint16_t R1G0XX_ExecRegularConv(PWMC_Handle_t *pHdl, uint8_t bChannel);

/**
  * It sets the specified sampling time for the specified ADC channel
  * on ADC1. It must be called once for each channel utilized by user
  它为ADC1上的指定ADC通道设置指定的采样时间。必须为用户使用的每个通道调用一次
  */
void R1G0XX_ADC_SetSamplingTime(PWMC_Handle_t *pHdl, ADConv_t ADConv_struct);

/**
  * It sets the specified sampling time for the specified ADC channel
  * on ADC1. It must be called once for each channel utilized by user

  */
uint16_t R1G0XX_IsOverCurrentOccurred(PWMC_Handle_t *pHdl);

/**
  * @}
  */

/**
  * @}
  */

#ifdef __cplusplus
}
#endif /* __cpluplus */

#endif /*__R1_F0XX_PWMNCURRFDBK_H*/

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
